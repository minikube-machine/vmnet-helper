name: Mirror vmnet-helper releases

on:
  schedule:
    - cron: '37 4 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  discover:
    name: Find missing tags
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.tags.outputs.tags }}
    steps:
      - name: Determine tags to mirror
        id: tags
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          upstream=$(git ls-remote --tags https://github.com/nirs/vmnet-helper.git | awk '{print $2}' | sed 's|refs/tags/||' | grep '^v')
          existing=$(gh release list --limit 1000 | awk '{print $1}')
          missing=()
          for t in $upstream; do
            if ! grep -Fxq "$t" <<<"$existing"; then
              missing+=("$t")
            fi
          done
          json=$(printf '%s\n' "${missing[@]}" | sort -V | jq -R . | jq -s .)
          echo "tags=$json" >> "$GITHUB_OUTPUT"

  create:
    name: Create releases
    needs: discover
    if: needs.discover.outputs.tags != '[]'
    runs-on: ubuntu-latest
    steps:
      - name: Create release for each tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAGS: ${{ needs.discover.outputs.tags }}
        run: |
          set -euo pipefail
          for tag in $( echo "$TAGS" | jq -r '.[]' ); do
            gh release view "$tag" >/dev/null 2>&1 && continue
            gh release create "$tag" -t "$tag" -n "Mirror of upstream release $tag"
          done

  build:
    name: Build and upload
    needs: [discover, create]
    if: needs.discover.outputs.tags != '[]'
    strategy:
      fail-fast: false
      matrix:
        tag: ${{ fromJson(needs.discover.outputs.tags) }}
        os: [macos-13, macos-15]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout upstream tag
        uses: actions/checkout@v4
        with:
          repository: nirs/vmnet-helper
          ref: ${{ matrix.tag }}
          fetch-depth: 0

      - name: Install dependencies
        run: |
          brew update
          brew install meson diffoscope || true

      - name: Build
        run: |
          set -euo pipefail
          meson setup build
          meson compile -C build
          ./archive.sh build

      - name: Rebuild for reproducibility
        run: |
          set -euo pipefail
          meson setup second
          meson compile -C second
          ./archive.sh second
          diffoscope build/vmnet-helper-*.tar.gz second/vmnet-helper-*.tar.gz

      - name: Upload artifacts
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "${matrix.tag}" build/vmnet-helper-*.tar.gz --clobber

  no-new:
    name: No new releases
    needs: discover
    if: needs.discover.outputs.tags == '[]'
    runs-on: ubuntu-latest
    steps:
      - run: echo 'No new upstream tags found.'
