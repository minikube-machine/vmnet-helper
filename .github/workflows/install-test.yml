name: Test Installer Script

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    # Runs on pushes or pull requests targeting the main branch
  push:
    branches: [ "main" ]
  # Runs on a schedule
  schedule:
    # ‚è∞ Runs every 4 hours
    - cron: '0 */4 * * *'

jobs:
  test-installation:
    # Job name will dynamically include the OS version
    name: Test on macOS ${{ matrix.os }}
    
    # Use a matrix strategy to run the job on multiple OS versions
    strategy:
      matrix:
        os: [macos-13, macos-15]
        
    # Specify the runner from the matrix
    runs-on: ${{ matrix.os }}

    steps:
      - name: üì• Download and Install vmnet-helper
        run: |
          set -x
          curl -fsSL https://github.com/minikube-machine/vmnet-helper/releases/latest/download/install.sh | sudo bash
          echo $?
      - name: ‚úÖ Check vmnet-helper version
        id: get_version
        run: |
          /opt/vmnet-helper/bin/vmnet-helper --version
          VERSION_STRING=$(/opt/vmnet-helper/bin/vmnet-helper --version | grep -oE 'v[0-9]+\.[0-9]+(\.[0-9]+)?')
          echo "version=$VERSION_STRING" >> $GITHUB_OUTPUT
      - name: üè∑Ô∏è Verify Matching Latest Versions
        run: |
          INSTALLED_VERSION="${{ steps.get_version.outputs.version }}"
          echo "Installed version is: $INSTALLED_VERSION"

          # Fetch the latest release tag from the GitHub API
          LATEST_TAG=$(curl -s https://api.github.com/repos/minikube-machine/vmnet-helper/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          echo "Latest release tag is: $LATEST_TAG"

          if [[ "$INSTALLED_VERSION" == "$LATEST_TAG" ]]; then
            echo "‚úÖ Success: Installed version matches the latest release tag."
          else
            echo "‚ùå Error: Version mismatch! Expected '$LATEST_TAG' but found '$INSTALLED_VERSION'."
            exit 1
          fi

          echo "‚úÖ Version check passed."
