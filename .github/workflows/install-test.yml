name: Test Installer Script

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    # Runs on pushes or pull requests targeting the main branch
  push:
    branches: [ "main" ]
  # Runs on a schedule
  schedule:
    # ‚è∞ Runs every 4 hours
    - cron: '0 */4 * * *'

jobs:
  test-installation:
    # Job name will dynamically include the OS version
    name: Test on macOS ${{ matrix.os }}
    
    # Use a matrix strategy to run the job on multiple OS versions
    strategy:
      matrix:
        os: [macos-13, macos-15]
        
    # Specify the runner from the matrix
    runs-on: ${{ matrix.os }}

    steps:
      - name: üì• Download and Install vmnet-helper
        run: |
          set -x
          curl -fsSL https://github.com/minikube-machine/vmnet-helper/releases/latest/download/install.sh | sudo bash
          echo $?
      - name: ‚úÖ Verify vmnet-helper Version
        run: /opt/vmnet-helper/bin/vmnet-helper --version
      - name: üè∑Ô∏è Verify Matching Latest Versions
        run: |
          # Fetch the latest release tag from the GitHub API
          LATEST_TAG=$(curl -s https://api.github.com/repos/minikube-machine/vmnet-helper/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')

          # Get the version from the script's output (e.g., "vmnet-helper version vX.Y.Z")
          INSTALLED_VERSION=$(/opt/vmnet-helper/bin/vmnet-helper --version | awk '{print $3}')

          echo "Latest GitHub Tag: $LATEST_TAG"
          echo "Installed Version:  $INSTALLED_VERSION"

          # Compare the versions and fail the workflow if they don't match
          if [ "$LATEST_TAG" != "$INSTALLED_VERSION" ]; then
            echo "::error::Version mismatch! Latest GitHub tag is $LATEST_TAG, but the installed version is $INSTALLED_VERSION."
            exit 1
          fi

          echo "‚úÖ Version check passed."
