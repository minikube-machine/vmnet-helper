name: mirror-upstream-tags
on:
  schedule:
    - cron: '0 10 * * *'
  workflow_dispatch:
jobs:
  discover:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      tags: ${{ steps.tags.outputs.tags }}
      latest_tag: ${{ steps.tags.outputs.latest_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.MIRROR_TOKEN }}
      - name: Configure git
        run: |
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com
      - name: Determine tags to mirror
        id: tags
        env:
          GH_TOKEN: ${{ secrets.MIRROR_TOKEN }}
        run: |
          set -euo pipefail
          git remote add upstream https://github.com/nirs/vmnet-helper.git
          git fetch upstream --tags
          upstream_tags=$(git ls-remote --refs --tags upstream | \
            awk '{print $2}' | sed 's|refs/tags/||' | sort -V)
          origin_tags=$(git ls-remote --refs --tags origin 2>/dev/null | \
            awk '{print $2}' | sed 's|refs/tags/||' | sort -V)
          missing_tags=""
          for tag in $upstream_tags; do
            if ! echo "$origin_tags" | grep -q "^$tag$"; then
              missing_tags="$missing_tags $tag"
              git fetch upstream "refs/tags/$tag:refs/tags/$tag"
              git push origin "refs/tags/$tag:refs/tags/$tag"
              if gh release view "$tag" >/dev/null 2>&1; then
                echo "Release $tag already exists"
              else
                gh release create "$tag" -t "$tag" -n "Mirror of upstream release $tag"
              fi
            fi
          done
          tags_json=$(printf '%s\n' $missing_tags | \
            python -c 'import sys,json; print(json.dumps([t for t in sys.stdin.read().split() if t]))')
          echo "tags=$tags_json" >> $GITHUB_OUTPUT
          latest_tag=$(printf '%s\n' $upstream_tags | tail -n1)
          echo "latest tag is $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
  build_upload_assets:
    needs: discover
    if: needs.discover.outputs.tags != '[]'
    strategy:
      fail-fast: false
      matrix:
        tag: ${{ fromJson(needs.discover.outputs.tags) }}
        platform: [macos-13, macos-15]
    runs-on: ${{ matrix.platform }}
    permissions:
      contents: write
    steps:
      - name: Checkout self source
        uses: actions/checkout@v4
      - name: Checkout upstream source
        uses: actions/checkout@v4
        with:
          repository: nirs/vmnet-helper
          ref: ${{ matrix.tag }}
          path: upstream
          fetch-depth: 1
      - name: Install requirements
        run: brew install meson diffoscope
      - name: Build
        run: |
          cd upstream
          meson setup build
          meson compile -C build
          ./archive.sh build
      - name: Test reproducibility
        run: |
          cd upstream
          meson setup repro
          meson compile -C repro
          ./archive.sh repro
          diffoscope build/vmnet-helper-*.tar.gz repro/vmnet-helper-*.tar.gz
      - name: Upload artifact to release
        env:
          GH_TOKEN: ${{ secrets.MIRROR_TOKEN }}
        working-directory: upstream
        run: |
          set -euo pipefail

          repo="minikube-machine/vmnet-helper"
          tag="${{ matrix.tag }}"

          # Find the tarball produced by ./archive.sh build
          shopt -s nullglob
          files=(build/vmnet-helper-*.tar.gz)
          if (( ${#files[@]} == 0 )); then
            echo "No tarball found in ./build. Contents are:" >&2
            ls -lah build || true
            exit 1
          fi
          tarball="${files[0]}"

          # Ensure the release exists
          if ! gh release view "$tag" --repo "$repo" >/dev/null 2>&1; then
            gh release create "$tag" --repo "$repo" \
              -t "$tag" \
              -n "Mirror of upstream release github.com/nirs/vmnet-helper $tag"
          fi

          # Upload platform-specific tarball
          gh release upload --repo "$repo" "$tag" "$tarball" --clobber

          # Upload install.sh once (avoid duplicate uploads across matrix)
          if [[ "${{ matrix.platform }}" == "macos-15" ]]; then
            gh release upload --repo "$repo" "$tag" ../install.sh --clobber
          fi